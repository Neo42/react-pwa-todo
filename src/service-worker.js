/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import {clientsClaim, skipWaiting} from 'workbox-core'
import {precacheAndRoute} from 'workbox-precaching'
import {registerRoute} from 'workbox-routing'
import {
  CacheFirst,
  NetworkFirst,
  StaleWhileRevalidate,
} from 'workbox-strategies'
// import {ExpirationPlugin} from 'workbox-expiration'
// import {precacheAndRoute, createHandlerBoundToURL} from 'workbox-precaching'

// // Precache all of the assets generated by your build process.
// // Their URLs are injected into the manifest variable below.
// // This variable must be present somewhere in your service worker file,
// // even if you decide not to use precaching. See https://cra.link/PWA
// // precacheAndRoute(self.__WB_MANIFEST)

// // Set up App Shell-style routing, so that all navigation requests
// // are fulfilled with your index.html shell. Learn more at
// // https://developers.google.com/web/fundamentals/architecture/app-shell
// const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$')
// registerRoute(
//   // Return false to exempt requests from being fulfilled by index.html.
//   ({request, url}) => {
//     // If this isn't a navigation, skip.
//     if (request.mode !== 'navigate') {
//       return false
//     } // If this is a URL that starts with /_, skip.

//     if (url.pathname.startsWith('/_')) {
//       return false
//     } // If this looks like a URL for a resource, because it contains // a file extension, skip.

//     if (url.pathname.match(fileExtensionRegexp)) {
//       return false
//     } // Return true to signal that we want to use the handler.

//     return true
//   },
//   createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html'),
// )

// // An example runtime caching route for requests that aren't handled by the
// // precache, in this case same-origin .png requests like those from in public/
// registerRoute(
//   // Add in any other file extensions or routing criteria as needed.
//   ({url}) =>
//     url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
//   new StaleWhileRevalidate({
//     cacheName: 'images',
//     plugins: [
//       // Ensure that once this runtime cache reaches a maximum size the
//       // least-recently used images are removed.
//       new ExpirationPlugin({maxEntries: 50}),
//     ],
//   }),
// )

// // This allows the web app to trigger skipWaiting via
// // registration.waiting.postMessage({type: 'SKIP_WAITING'})
// self.addEventListener('message', (event) => {
//   if (event.data && event.data.type === 'SKIP_WAITING') {
//     self.skipWaiting()
//   }
// })

// Any other custom service worker logic can go here.

skipWaiting()
clientsClaim()

// these two events will only be fired on the first initialization
self.addEventListener('install', (event) => {
  // const asyncInstall = new Promise((resolve) => {
  //   console.log('Waiting to resolve...')
  //   setTimeout(resolve, 5000)
  // })
  // // the awaited promise has to be settled eventually
  // // otherwise the wait before installation will last forever
  // event.waitUntil(asyncInstall)
})

self.addEventListener('activate', (event) => {
  console.log('activate')
})

// make cdn resources available by using service worker cache without browser cache disabled during downtime
registerRoute(
  new RegExp('https:.*min.(css|js)'),
  new StaleWhileRevalidate({cacheName: 'cdn-cache'}), // cache first & also request latest in the background
)

// cache response from server
registerRoute(
  new RegExp('http://.*:4567.*.json'),
  new NetworkFirst({cacheName: 'server-cache'}),
)

// alert for offline POST requests
addEventListener('fetch', (event) => {
  if (event.request.method === 'POST' || event.request.method === 'DELETE') {
    event.respondWith(
      fetch(event.request).catch(
        (error) =>
          new Response(
            JSON.stringify({
              error: 'This action is disabled while the app is offline.',
            }),
            {headers: {'Content-Type': 'application/json'}},
          ),
      ),
    )
  }
})

precacheAndRoute(self.__WB_MANIFEST || [])
